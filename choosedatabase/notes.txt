-Databases don't impact functional requirement Functional requirement can be fulfilled by using any databases.
-Databases are chosen for non-functional requirements. 

Things That matter

- Structure of the data - structured or non structured data.
- Query pattern
- Amount of scale needed to handle

1. Caching
When we don't want to query the same data again and again from database or remote call from different service that is having high latency, then we can cache that locally.Commonly used solutions are - Redis, Memecache. 

2. File Storage
Files like images, videos etc. To store this kind of data we use blob storage. These are not databases, Databases are fundamentally those where we can query on the data.
Commonly used - Amazon S3.
We should also use CDNs to make this data available throughout the globe.A content delivery network (CDN) is a geographically distributed group of servers that caches content close to end users. CDN examples - Akamai, cloudflare, cloudfront.

3. Text Search Engines
These are not databases these are search engines. Databases gives us guarantee that if we write some data to databases, it wouldn't be lost.
There might be fuzzy search. We can provide a level of fuzzyness that our search engine needs to support e.g. edit distance = 3. For these kind of use cases, we should use text search engine.
Commonly used CDNs- ElasticSearch and Solr, Both of these are built on top of Apache lucene.

4. Time series databases
These databases are extension of relational databases, with not all the functionalities and certain additional functionalities. When we are building matrix monitoring kind of system we cannot do random updates. We will always do sequential updates in the append only mode. If we put an entry at t1, next entry would be at t2 where t2 > t1 i.e. append only write mode. The read queries will be bulk read queries with a time range to query last minute or last few hours or few days of data. Timeseries databases are optimised for this kind of query pattern.
Ex - Influx DB, Open TSDB.

5. Datawarehouse/Big data
When we have lot of information and we want to store that information and provide analytics on that. These are not used for transactional systems, these are generally used for offline reporting. 
Ex - Hadoop
 

SQL vs NoSql databases

6. Relational DBs - MySql, Oracle, SQL server, Postgres

Structure of the data is essential while selecting databases. While data is very structured we should use relational databases. The structured information is the information that we can easily model in form of tables and tables would have rows and columns of information. E.g. user profile on social network

Another factor is when we need ACID properties in our databases. Relational databases provide these properties.

If we have structured data and we do not need ACID properties then we can use any of them (SQL or NoSQL) it will not make much difference

7. Document DBs - MONGODB, Couchbase